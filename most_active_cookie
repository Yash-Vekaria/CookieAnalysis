#!/usr/bin/env python3

# Importing necessary modules
from datetime import datetime
import argparse
import re
import os




class CustomError(Exception):
	'''
	Custom error class.
	'''
	def __init__(self, message="A custom error occurred!"):
		self.message = message
		# print(self.message)
		super().__init__(self.message)




class MyTestSuite():
	'''
	Custom class to maintain and run test cases.
	'''
	def __init__(self):
		return


	def test_filename(self, logfilename):
		'''
		Test cases to test input cookie log filename. Returns to caller if all tests pass else exits after printing relevant custom error message.
		Input: Command line argument -- cookie log file name.
		Output: Message with details regarding the raised custom error (if any).
		'''
		
		# Testing if log file argument is not provided by the user
		if len(logfilename) == 0:
			raise CustomError("Filename not provided!")
			exit()
		
		# Testing if incorrect log file is provided by the user
		if not(str(logfilename).endswith(".csv")):
			raise CustomError("Provided logfile has incorrect filetype! .csv required!")
			exit()

		# Testing if the file exists in the current directory
		if not(os.path.exists(os.path.join(os.getcwd(), str(logfilename)))):
			raise CustomError(f"The cookie log file does not exist in the current working directory. Move the file to: {os.getcwd()}")
			exit()
		return


	def test_date(self, date):
		'''
		Test cases to test input queried date. Returns to caller if all tests pass else exits after printing relevant custom error message.
		Input: Command line argument -- date.
		Output: Message with details regarding the raised custom error (if any).
		'''

		# Testing if date argument is not provided by the user
		if len(date) == 0:
			raise CustomError("Date not provided!")
			exit()

		# Testing if incorrect date format is input by the user
		if len(str(date)) != 10:
			raise CustomError("Provided date is incorrect! It should be in YYYY-MM-DD format!")
			exit()
		
		# Testing if entered date is valid (i.e., year, month and day takes valid realistic values)
		try:
			valid_date = datetime.strptime(date, "%Y-%m-%d")
			# Fetching current date and time and obtaining the difference between the two for a future test case below
			current_date = datetime.now()
			date_difference = valid_date - current_date
			seconds_difference = date_difference.total_seconds()
		except ValueError:
			raise CustomError("ValueError: The entered date is not valid! Enter the date in YYYY-MM-DD format!")
			exit()
		
		# Testing if the queried date is not before 1944 as ookies were first introduced in the web in 1994, so the log file should not be queried with a date before 1994.
		if valid_date.date().year < 1994:
			raise CustomError("At the entered date, cookies did not exist in the web! Please enter an appropriate date!")
			exit()

		# Testing if the queried date is a future date as cookies should not be queried for a future date as they will not exist in the data. 5 secs difference check is added to cover querying close to midnight.
		if (valid_date > current_date) and (seconds_difference > 5):
			raise CustomError("The entered date is a date in future! Enter an appropriate date to query!")
			exit()
		return


	def test_file_contents(self, data, date_string):
		'''
		Test cases to test contents of the cookie log file. Returns to caller if all tests pass else exits after printing relevant custom error message.
		Input: Data read from the cookie logfile.
		Output: Message with details regarding the raised custom error (if any).
		'''

		# Testing if the file is empty
		if len(data) == 0:
			raise CustomError("Input cookie logfile is empty!")
			exit()
		'''
		# Testing if the date_string matches in the string of file contents (handled in get_most_active_cookie())
		if not(date_string in data):
			print("Warning: There are no cookies corresponding to the queried date in the log file!")
			pass
		'''
		return




class ProcessCookieLogfile():
	'''
	Class to process input log file.
	'''

	def __init__(self, file_data):
		# Obtaining the logfile data as a list, ignoring the header on the first line
		self.data = file_data.split("\n")[1:]
		return


	def preprocess_input(self, array):
		'''
		Strip any whitespace at the beginning or the end of the string
		Input: Array of [cookie string, datetime string]
		Output: Pre-processed result
		'''
		return [str(array[0]).strip(), str(array[1]).strip()]


	def check_empty_string(self, input_string):
		'''
		Check if the input string is of length zero
		Input: String to check
		Output: Boolean result
		'''
		return True if len(input_string) == 0 else False


	def detect_whitespace(self, input_string):
		'''
		Check if the input string consists of any whitespaces
		Input: String to check
		Output: Boolean result
		'''
		return bool(re.search(r'\s', input_string))


	def check_cookie_string_characters(self, input_string):
		'''
		Check if cookie string contains any characters other than 0-9, a-z or A-Z
		Input: String to check
		Output: Boolean result
		'''
		return bool(re.search(r'[0-9a-zA-Z]', input_string))


	def get_most_active_cookie(self, qdate, file_data):
		'''
		Extracts the most active cookie from the logfile (i.e. file_data) corresponding to the queried date (i.e., qdate)
		Input: queried date (i.e., qdate) and cookie logfile data (i.e. file_data)
		Output: Prints the most active cookies in the logfile for the qdate
		'''
		# Defining datetime format expected
		datetime_format = "%Y-%m-%dT%H:%M:%S%z"
		
		# Variable to store date to cookie map along with number of occurences of each cookie on a given day
		cookie_map = {}
		
		# Parse the timestamp string (with timezone) into a date object and associate it with cookie
		for entry in self.data:
			
			# Selecting the first two items: cookie and datetime in case some line comprises of more than two items
			items = self.preprocess_input(entry.split(",")[:2])

			# Skip the current entry if its cookie contains whitespaces or cookie string is empty
			if self.detect_whitespace(items[0]) or self.check_empty_string(items[0]):
				continue

			# Skip the current entry if its date contains whitespaces or date string is empty
			if self.detect_whitespace(items[1]) or self.check_empty_string(items[1]):
				continue

			# Skip the current entry if the cookie string has any non-alphanumeric characters
			if not(self.check_cookie_string_characters(items[0])):
				continue

			cookie = items[0]
			try:
				date = datetime.strptime(items[1], datetime_format).date()
			except:
				# The date corresponding to the current entry is not in the required datetime format, hence skipping it
				continue
			# print(cookie, date)
			
			if date not in cookie_map.keys():
				cookie_map[date] = {}
			if cookie not in cookie_map[date].keys():
				cookie_map[date][cookie] = 0
			cookie_map[date][cookie] += 1

		# print(cookie_map[qdate])
		if qdate not in cookie_map.keys():
			# This condition will be satisfied when there are no cookies corresponding to the queried date in the log file
			exit()

		# Sort the sub-dictionary within the cookie_map corresponding to the query date based on values of sub-dictionary in descending order
		sorted_cookie_map = dict(sorted(cookie_map[qdate].items(), key=lambda item: item[1], reverse=True))
		# print(sorted_cookie_map)

		# Extract the count of the highest occurences of any cookie on the queried date
		highest_frequency = int(sorted_cookie_map[list(sorted_cookie_map.keys())[0]])
		# Prnting all cookies whose frequency of occurence is equal to the highest_frequency
		for cookie_key in sorted_cookie_map.keys():
			if int(sorted_cookie_map[cookie_key]) == highest_frequency:
				print(cookie_key)
			else:
				break;

		return




def main(args):
	'''
	Perform testing and processing of logfile to obtain the most active cookie.
	Input: command line "args"
	Output: NA
	'''

	# Creating Test Suite object
	test_suite = MyTestSuite()

	# Perform tests specific to the cookie logfile name
	test_suite.test_filename(args.logfilename)
	cookie_logfile = args.logfilename

	# Perform tests specific to the query date input from the user
	test_suite.test_date(args.date)
	queried_date = datetime.strptime(args.date, "%Y-%m-%d").date()

	# Read cookie logfile
	filepath = os.path.join(os.getcwd(), cookie_logfile)
	file_pointer = open(filepath, "r")
	file_data = file_pointer.read().strip()
	file_pointer.close()

	# Perform tests specific to the cookie logfile data
	test_suite.test_file_contents(file_data, args.date)
	
	# print(queried_date, cookie_logfile)
	# Creating a processor object and obtaining the most active cookie
	processor = ProcessCookieLogfile(file_data)
	processor.get_most_active_cookie(queried_date, file_data)

	return





def parse_args():
	'''
	Parses command line arguments provided by the user
	Input: Command line arguments: cookie logfile and date
	Output: Returns parsed command line arguments
	'''
	# Instantiates parser object to input command line argument of logfile and date
	parser = argparse.ArgumentParser()
	parser.add_argument("logfilename", type=str, help="Enter the name of the cookie log file in the current directory.")
	parser.add_argument("-d", "--date", type=str, required=True, help="Enter the date in YYYY-MM-DD format corresponding to which the most active cookie is to be fetched.")
	args = parser.parse_args()

	return args




if __name__ == "__main__":

	# Read and parse command line arguments provided by the user
	args = parse_args()

	# Invoking the main() function with parse command line arguments
	main(args)

